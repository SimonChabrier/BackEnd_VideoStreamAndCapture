# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration

# Paramètre de stockage de mes fichiers images
parameters:
    upload_directory: 'assets/upload/pictures/'
    cache_directory: 'media/cache/portrait/assets/upload/pictures/'
      

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        
        # Je lie mes paramètres upload_directory et cache_director 
        # dans des variables accessibles globalement (Eg voir : EasyAdminSubscriber.php)
        bind:
            $uploadParameter: '%upload_directory%'
            $cacheParameter: '%cache_directory%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
    
    
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Appel du service Cache Manager de LiipImagineBundle
    Liip\ImagineBundle\Service\FilterService:
        alias: 'liip_imagine.service.filter'
    
    
    # Mon listener sur Doctrine pour exploiter mon service jpegConverterService depuis PictureListener
    App\EventListener\PictureListener:
        tags:
            -
                # le nom du type d'évènement, ici un évènement doctrine entity listener
                name: doctrine.orm.entity_listener
                # le nom de l'event : avant update (impératif sinon ça ne marche pas même pou les créations)
                event: preUpdate
                # l'entity sur laquelle on veut être notifié
                entity: App\Entity\Picture
                # methode de mon listener
                method: updatePictureFile
            -
                name: doctrine.orm.entity_listener
                event: prePersist
                entity: App\Entity\Picture
                method: updatePictureFile    

    # Mon listener sur Doctrine pour ma méthode cachePictureFile qui construit le cache à chaque nouvelle image postée.
    App\EventListener\liipListener:
        tags:
            -
                name: doctrine.orm.entity_listener
                event: preUpdate
                entity: App\Entity\Picture
                method: cachePictureFile
            -
                name: doctrine.orm.entity_listener
                event: prePersist
                entity: App\Entity\Picture
                method: cachePictureFile  
