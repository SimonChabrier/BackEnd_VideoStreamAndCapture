# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration

# Paramètre de stockage de mes fichiers images
parameters:
    upload_directory: 'assets/upload/pictures/'
    cache_directory: 'media/cache/portrait/assets/upload/pictures/'
      

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        
        # Je lie mes paramètres upload_directory et cache_directory 
        # dans des variables accessibles globalement (Eg voir : EasyAdminSubscriber.php)
        bind:
            $uploadPath: '%upload_directory%'
            $cachePath: '%cache_directory%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
    
    
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Déclaration du service Cache Manager de LiipImagineBundle
    # pour l'injecter dans PictureListener.php
    Liip\ImagineBundle\Service\FilterService:
        alias: 'liip_imagine.service.filter'
    
    
    # EventListener : PictureListener sur Doctrine
    # J'y injecte mon service jpegConverterService
    # à chaque foi qu'on instancie un nouvel objet Picture.
    # On accède à la méthode convertBase64ToJgeg() de jpegConverterService
    # dans la méthode processPictureFile() de PictureListener
    # J'y injecte le service : FilterService (Classe de Service du bundle Liip)
    # à chaque foi qu'on instancie un nouvel objet Picture.
    # On accède à ma méthode cachePictureFile() sur l'objet Picture courant.
    # dans laquelle on utilise getUrlOfFilteredImage() de la Classe FilterService
    # On passe sur la valeur de la valeur retrounée par getPictureFile() un filtre configuré dans liip_imagine.yaml 
    # Le filtre traite et le met en cache le fichier image.
    # Faire tout le process directement dans le back-end
    # permet de servir au client (ou view) un fichier image directement dans sa version optimisée => Gain de performance et de clarté dans le code.
    App\EventListener\PictureListener:
        tags:
            -
                # le nom du type d'évènement, ici un évènement doctrine entity listener
                name: doctrine.orm.entity_listener
                event: preUpdate
                entity: App\Entity\Picture
                method: processPictureFile
            -
                name: doctrine.orm.entity_listener
                event: prePersist
                entity: App\Entity\Picture
                method: processPictureFile   

    

